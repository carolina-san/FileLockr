openapi: 3.0.3
info:
  title: API para Aplicaci贸n de Encriptado de Archivos
  description: API para gestionar usuarios y archivos en un sistema de encriptaci贸n.
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Servidor local
paths:
  /auth/login:
    post:
      tags:
      - Login
      summary: Iniciar sesi贸n para obtener un token JWT
      operationId: authLoginPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_login_body'
        required: true
      responses:
        "200":
          description: Token generado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-swagger-router-controller: Login
  /auth/register:
    post:
      tags:
      - Login
      summary: Registrar un nuevo usuario
      operationId: authRegisterPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
        required: true
      responses:
        "201":
          description: Usuario registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
      x-swagger-router-controller: Login
  /usuarios:
    get:
      tags:
      - Usuario
      summary: Obtener todos los usuarios
      operationId: usuariosGET
      responses:
        "200":
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
                x-content-type: application/json
      security:
      - bearerAuth: []
      x-swagger-router-controller: Usuario
    post:
      tags:
      - Usuario
      summary: Crear un nuevo usuario
      operationId: usuariosPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
        required: true
      responses:
        "201":
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Usuario
  /usuarios/{idUsuario}:
    get:
      tags:
      - Usuario
      summary: Obtener un usuario por ID
      operationId: usuariosIdUsuarioGET
      parameters:
      - name: idUsuario
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        "404":
          description: Usuario no encontrado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Usuario
    put:
      tags:
      - Usuario
      summary: Actualizar un usuario
      operationId: usuariosIdUsuarioPUT
      parameters:
      - name: idUsuario
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
        required: true
      responses:
        "200":
          description: Usuario actualizado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Usuario
    delete:
      tags:
      - Usuario
      summary: Eliminar un usuario
      operationId: usuariosIdUsuarioDELETE
      parameters:
      - name: idUsuario
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Usuario eliminado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Usuario
  /usuario/{nombre}:
    get:
      tags:
      - Usuario
      summary: Obtener un usuario por nombre
      operationId: getIdUsuario
      parameters:
      - name: nombre
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        "404":
          description: Usuario no encontrado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Usuario
  /ficheros:
    get:
      tags:
      - Fichero
      summary: Obtener todos los ficheros
      operationId: ficherosGET
      responses:
        "200":
          description: Lista de ficheros
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fichero'
                x-content-type: application/json
      security:
      - bearerAuth: []
      x-swagger-router-controller: Fichero
    post:
      tags:
      - Fichero
      summary: Crear un nuevo fichero
      operationId: ficherosPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fichero'
        required: true
      responses:
        "201":
          description: Fichero creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fichero'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Fichero
  /ficheros/{idFichero}:
    get:
      tags:
      - Fichero
      summary: Obtener un fichero por ID
      operationId: ficherosIdFicheroGET
      parameters:
      - name: idFichero
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Fichero encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fichero'
        "404":
          description: Fichero no encontrado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Fichero
    put:
      tags:
      - Fichero
      summary: Actualizar un fichero
      operationId: ficherosIdFicheroPUT
      parameters:
      - name: idFichero
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fichero'
        required: true
      responses:
        "200":
          description: Fichero actualizado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Fichero
    delete:
      tags:
      - Fichero
      summary: Eliminar un fichero
      operationId: ficherosIdFicheroDELETE
      parameters:
      - name: idFichero
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Fichero eliminado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Fichero
  /ficheros/{nombre}:
    get:
      tags:
      - Fichero
      summary: Obtener un fichero por nombre
      operationId: getIdFichero
      parameters:
      - name: nombre
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Fichero encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fichero'
        "404":
          description: Usuario no encontrado
      security:
      - bearerAuth: []
      x-swagger-router-controller: Fichero
  /compartir:
    post:
      tags:
      - Compartir
      summary: Compartir un fichero
      operationId: compartir
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Compartir'
        required: true
      responses:
        "201":
          description: Fichero compartico correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compartir'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Compartir
    get:
      summary: Busca un archivo compartido por ID de fichero e ID de usuario
      description: Devuelve el registro en la tabla compartidos que coincide con los IDs proporcionados.
      operationId: compartirGET
      parameters:
        - name: idFichero
          in: query
          required: true
          schema:
            type: integer
          description: El ID del fichero a buscar
        - name: idUsuario
          in: query
          required: true
          schema:
            type: integer
          description: El ID del usuario asociado al fichero
      responses:
        '200':
          description: Registro encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compartir'
        '404':
          description: No se encontr贸 el registro
        '500':
          description: Error del servidor
      security:
      - bearerAuth: []
      x-swagger-router-controller: Compartir
  /compartir/{usuario}:
    get:
      tags:
      - Compartir
      summary: Obtener ficheros de un usuario
      operationId: getFicherosByUser
      parameters:
        - name: usuario
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "201":
          description: Ficheros obtenidos correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fichero'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Compartir
components:
  schemas:
    Usuario:
      required:
      - nombre
      - clave
      - salt
      - publicKey
      - privateKey
      type: object
      properties:
        idUsuario:
          type: integer
          description: ID 煤nico del usuario
        nombre:
          type: string
          description: Nombre del usuario
        clave:
          type: string
          description: Contrase帽a del usuario
        salt:
          type: string
          description: Sal para la contrase帽a
        publicKey:
          type: string
          description: Clave p煤blica del usuario
        privateKey:
          type: string
          description: Clave privada del usuario
          format: binary
      example:
        idUsuario: 0
        nombre: nombre
        clave: clave
        salt: salt
        publicKey: publicKey
        privateKey: privateKey
    Fichero:
      required:
      - archivo
      - nombre
      type: object
      properties:
        idFichero:
          type: integer
          description: ID 煤nico del fichero
        archivo:
          type: string
          description: Datos del fichero
        nombre:
          type: string
          description: nombre del fichero
      example:
        idFichero: 0
        archivo: archivo
        nombre: nombre
    auth_login_body:
      required:
      - clave
      - nombre
      type: object
      properties:
        nombre:
          type: string
        clave:
          type: string
    inline_response_200:
      type: object
      properties:
        token:
          type: string
          description: Token JWT para autenticar solicitudes
      example:
        token: token
    Compartir:
      required:
      - archivo
      - usuario
      - kfile
      - iv
      type: object
      properties:
        archivo:
          type: integer
          description: ID del archivo
        usuario:
          type: integer
          description: ID del usuario
        kfile:
          type: string
          description: Kfile del archivo cifrado
        iv:
          type: string
          description: IV del archivo cifrado
      example:
        archivo: 0
        usuario: 6
        kfile: kfile
        iv: iv
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
